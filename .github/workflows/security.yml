# AI-SDLC Framework v3.2.1 - Security Analysis Pipeline
# Comprehensive security scanning and vulnerability assessment
# Generated by AI-SDLC Framework

name: üîí Security Analysis

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  schedule:
    # Run security scans daily at 2 AM EST
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  # ============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================================================
  dependency-scan:
    name: üîç Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîç NPM Audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: üîç Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

      - name: üìä Upload Audit Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: npm-audit.json

  # ============================================================================
  # CODE SECURITY ANALYSIS
  # ============================================================================
  codeql-analysis:
    name: üîç CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      matrix:
        language: [javascript, typescript]
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  # ============================================================================
  # SECRET SCANNING
  # ============================================================================
  secret-scan:
    name: üîê Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: üîê GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # CREDIT REPAIR COMPLIANCE SCAN
  # ============================================================================
  compliance-scan:
    name: üè¶ FCRA Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üè¶ FCRA Compliance Check
        run: |
          echo "Running FCRA compliance checks..."
          # Check for PII handling patterns
          grep -r "ssn\|social.*security\|credit.*score" src/ || echo "No direct PII references found"

          # Check for audit trail implementations
          grep -r "audit.*log\|compliance.*log" src/ || echo "No audit logging found"

          # Check for encryption patterns
          grep -r "encrypt\|decrypt\|cipher" src/ || echo "No encryption patterns found"

          # Run custom compliance script if available
          if [ -f "scripts-complex/security-scanner.js" ]; then
            node scripts-complex/security-scanner.js
          fi

      - name: üîí PII Detection Scan
        run: |
          echo "Scanning for potential PII exposure..."
          # Look for common PII patterns in code
          grep -rE "(ssn|social.security|credit.score|account.number)" src/ tests/ || echo "No PII patterns detected"

          # Check test files for real data
          grep -rE "(\b\d{3}-\d{2}-\d{4}\b|\b\d{9}\b)" tests/ || echo "No SSN patterns in tests"

  # ============================================================================
  # CONTAINER SECURITY (if applicable)
  # ============================================================================
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Check for Dockerfile
        id: dockerfile-check
        run: |
          if ls Dockerfile* 1> /dev/null 2>&1; then
            echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: üê≥ Build Docker Image
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t security-scan:latest .
          fi

      - name: üîç Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # SECURITY SCORECARD
  # ============================================================================
  scorecard:
    name: üìä OSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: üìä Run OSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: üìä Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # ============================================================================
  # SECURITY NOTIFICATION
  # ============================================================================
  security-notification:
    name: üîî Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, compliance-scan]
    if: always()
    steps:
      - name: üîî Notify Security Team
        env:
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_SECURITY_WEBHOOK }}
        run: |
          if [[ -n "$MS_TEAMS_WEBHOOK_URI" ]]; then
            # Determine overall security status
            OVERALL_STATUS="success"
            if [[ "${{ needs.dependency-scan.result }}" == "failure" ||
                  "${{ needs.codeql-analysis.result }}" == "failure" ||
                  "${{ needs.secret-scan.result }}" == "failure" ||
                  "${{ needs.compliance-scan.result }}" == "failure" ]]; then
              OVERALL_STATUS="failure"
            fi

            curl -H "Content-Type: application/json" -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "'$( [[ "$OVERALL_STATUS" == "success" ]] && echo "28a745" || echo "dc3545" )'",
              "summary": "üîí Security Analysis Complete",
              "sections": [{
                "activityTitle": "AI-SDLC Security Scan Results",
                "activitySubtitle": "Repository: ${{ github.repository }}",
                "facts": [
                  {"name": "Dependency Scan", "value": "${{ needs.dependency-scan.result }}"},
                  {"name": "CodeQL Analysis", "value": "${{ needs.codeql-analysis.result }}"},
                  {"name": "Secret Scan", "value": "${{ needs.secret-scan.result }}"},
                  {"name": "FCRA Compliance", "value": "${{ needs.compliance-scan.result }}"},
                  {"name": "Triggered by", "value": "${{ github.actor }}"},
                  {"name": "Branch", "value": "${{ github.ref_name }}"}
                ]
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "View Security Tab",
                "targets": [{"os": "default", "uri": "${{ github.server_url }}/${{ github.repository }}/security"}]
              }]
            }' "$MS_TEAMS_WEBHOOK_URI"
          fi
