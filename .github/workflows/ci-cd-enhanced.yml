# AI-SDLC Framework v3.2.1 - Enhanced CI/CD Pipeline
# Enterprise-grade CI/CD with comprehensive quality gates
# Generated by AI-SDLC Framework

name: 🚀 Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, master, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1
  SONAR_ORGANIZATION: thecreditpros
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write
  pull-requests: write
  issues: write

jobs:
  # ============================================================================
  # SETUP & VALIDATION
  # ============================================================================
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      environment: ${{ steps.deploy-check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Generate Package Lock File
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json at runtime..."
            npm install --package-lock-only --ignore-scripts --force
          fi


      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts
        
      - name: 🔧 Setup Husky (if needed)
        run: |
          if [ -d ".husky" ]; then
            npx husky install
          fi

      - name: 🔍 Validate Package Structure
        run: |
          npm run validate || echo "Validation script not found, skipping..."
          node -e "console.log('Package validation complete')"

      - name: 📋 Deployment Check
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" || "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Extract Version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=$(node -p "require('./package.json').version")-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # CODE QUALITY & SECURITY
  # ============================================================================
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        check: [lint, type-check, security-scan]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Generate Package Lock File
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json at runtime..."
            npm install --package-lock-only --ignore-scripts --force
          fi

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: 🔍 ESLint Check
        if: matrix.check == 'lint'
        run: |
          npm run lint
          npm run format -- --check

      - name: 🔍 TypeScript Check
        if: matrix.check == 'type-check'
        run: npm run type-check

      - name: 🔒 Security Scan
        if: matrix.check == 'security-scan'
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --moderate

      - name: 📊 Upload ESLint Results
        if: matrix.check == 'lint' && always()
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true

  # ============================================================================
  # COMPREHENSIVE TESTING
  # ============================================================================
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        node-version: [20, 22]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📦 Generate Package Lock File
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json at runtime..."
            npm install --package-lock-only --ignore-scripts --force
          fi

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: 🧪 Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit
          npm run test:coverage

      - name: 🔗 Integration Tests
        if: matrix.test-type == 'integration'
        run: npm run test:smart

      - name: 🎭 E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          npx playwright install --with-deps
          npm run test:e2e

      - name: 📊 Upload Coverage Reports
        if: matrix.test-type == 'unit' && matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # ============================================================================
  # SONARCLOUD ANALYSIS
  # ============================================================================
  sonarcloud:
    name: 📊 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [setup, test-suite]
    if: always() && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped')
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Generate Package Lock File
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json at runtime..."
            npm install --package-lock-only --ignore-scripts --force
          fi

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: 📊 Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          name: test-results-unit-node20
          path: ./

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_ORGANIZATION }}_${{ github.event.repository.name }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.spec.ts,**/node_modules/**
            -Dsonar.sources=src
            -Dsonar.tests=tests,__tests__,src/**/*.test.js,src/**/*.spec.js
            -Dsonar.projectVersion=${{ needs.setup.outputs.version }}

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      security-events: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔒 CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🔒 Dependency Vulnerability Scan
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # ============================================================================
  # BUILD & PACKAGE
  # ============================================================================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [setup, quality-gates]
    if: always() && needs.quality-gates.result == 'success'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Generate Package Lock File
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json at runtime..."
            npm install --package-lock-only --ignore-scripts --force
          fi

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: 🏗️ Build Application
        run: npm run build

      - name: 📦 Create Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.setup.outputs.version }}
          path: |
            dist/
            build/
            public/
          retention-days: 30

  # ============================================================================
  # DEPLOYMENT
  # ============================================================================
  deploy:
    name: 🚀 Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup, test-suite, build, sonarcloud]
    if: needs.setup.outputs.should-deploy == 'true' && always() && needs.build.result == 'success'
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.setup.outputs.version }}
          path: ./dist

      - name: 🚀 Deploy Application
        id: deploy
        run: |
          echo "Deploying to ${{ needs.setup.outputs.environment }}"
          echo "Version: ${{ needs.setup.outputs.version }}"
          # Add your deployment logic here
          echo "url=https://${{ needs.setup.outputs.environment }}.example.com" >> $GITHUB_OUTPUT

      - name: 🔔 Deployment Notification
        if: always()
        env:
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        run: |
          if [[ -n "$MS_TEAMS_WEBHOOK_URI" ]]; then
            curl -H "Content-Type: application/json" -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "'${{ job.status == 'success' && '28a745' || 'dc3545' }}'",
              "summary": "🚀 AI-SDLC Framework Deployment",
              "sections": [{
                "activityTitle": "Deployment to ${{ needs.setup.outputs.environment }}",
                "activitySubtitle": "Version ${{ needs.setup.outputs.version }}",
                "facts": [
                  {"name": "Repository", "value": "${{ github.repository }}"},
                  {"name": "Environment", "value": "${{ needs.setup.outputs.environment }}"},
                  {"name": "Version", "value": "${{ needs.setup.outputs.version }}"},
                  {"name": "Status", "value": "${{ job.status }}"},
                  {"name": "Triggered by", "value": "${{ github.actor }}"}
                ]
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "View Deployment",
                "targets": [{"os": "default", "uri": "${{ steps.deploy.outputs.url }}"}]
              }]
            }' "$MS_TEAMS_WEBHOOK_URI"
          fi

  # ============================================================================
  # POST-DEPLOYMENT VALIDATION
  # ============================================================================
  post-deploy-validation:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.deploy.result == 'success'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🧪 Smoke Tests
        run: |
          echo "Running smoke tests against ${{ needs.setup.outputs.environment }}"
          # Add smoke test logic here
          curl -f "${{ needs.deploy.outputs.url }}/health" || exit 1

      - name: 📊 Performance Tests
        run: |
          echo "Running performance tests"
          # Add performance test logic here

  # ============================================================================
  # CLEANUP
  # ============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [setup, deploy, post-deploy-validation]
    if: always()
    steps:
      - name: 🧹 Clean up artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // Keep only the latest 5 artifacts
            const oldArtifacts = artifacts.data.artifacts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5);

            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
